/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import AccountManager.AccountInformation;
import BlockChain.BlockChain;
import Utilities.SecurityUtils;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.security.Key;
import java.security.KeyPair;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Telmo
 */
public class GUI_NewAccount extends javax.swing.JFrame
{
    private BlockChain blockChain;
    private Key publicKey;
    private GUI_Login guiLogin;

    /**
     * Creates new form GUI_NewAccount
     */
    public GUI_NewAccount()
    {
        initComponents();

        this.setLocationRelativeTo(null);
    }

    public GUI_NewAccount(BlockChain blockChain, GUI_Login guiLogin)
    {
        initComponents();

        this.blockChain = blockChain;
        this.guiLogin = guiLogin;

        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        jtfName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jbLoadPublicKey = new javax.swing.JButton();
        jlFeedback = new javax.swing.JLabel();
        jbSave = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jpfPassword = new javax.swing.JPasswordField();
        jpfPasswordConfirm = new javax.swing.JPasswordField();
        jbGenerateRSAKeys = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Name:");

        jLabel2.setText("Public Key:");

        jbLoadPublicKey.setText("Load");
        jbLoadPublicKey.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbLoadPublicKeyActionPerformed(evt);
            }
        });

        jlFeedback.setText("Fill up your information:");

        jbSave.setText("Save");
        jbSave.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbSaveActionPerformed(evt);
            }
        });

        jbCancel.setText("Cancel");
        jbCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbCancelActionPerformed(evt);
            }
        });

        jLabel4.setText("Password:");

        jLabel5.setText("Confirm Password:");

        jbGenerateRSAKeys.setText("Generate RSA Keys");
        jbGenerateRSAKeys.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbGenerateRSAKeysActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtfName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jpfPasswordConfirm, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jpfPassword, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbCancel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbLoadPublicKey, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(jbGenerateRSAKeys, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(11, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jlFeedback))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlFeedback)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpfPasswordConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbLoadPublicKey)
                    .addComponent(jbGenerateRSAKeys, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbSave, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbCancelActionPerformed
    {//GEN-HEADEREND:event_jbCancelActionPerformed
        this.setVisible(false);
        dispose();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void jbSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbSaveActionPerformed
    {//GEN-HEADEREND:event_jbSaveActionPerformed

        // Verifica se o campo nome está preenchido
        String name = jtfName.getText();
        if ( !name.equals("") )
        {
            // Verifica se as password estão iguais
            // Quero evitar guardar as password em variáveis por questões de segurança
            if ( new String(jpfPassword.getPassword()).equals(new String(jpfPasswordConfirm.getPassword())) // Garante que as passwords introduzidas são iguais
                    && (!(new String(jpfPassword.getPassword()).equals("")) || !(new String(jpfPasswordConfirm.getPassword()).equals(""))) ) // Garante que estão preenchidas
            {
                // Por fim verifica se foi carregada uma publicKey
                if ( publicKey != null )
                {
                    try
                    {
                        // Cria as informações da conta
                        AccountInformation info = new AccountInformation(
                                name,
                                publicKey,
                                new String(jpfPassword.getPassword())
                        );

                        // Cria e adiciona o bloco à blockChain
                        blockChain.add(info);
                        
                        this.setVisible(false);
                        dispose();
                    }
                    catch ( Exception ex )
                    {
                        giveAlertFeedback(ex.getMessage());
                    }
                }
                else
                {
                    giveAlertFeedback("A public key is required to be loaded.");
                }
            }
            else
            {
                giveAlertFeedback("Passwords field is empty\n or passwords don't match.");
            }
        }
        else
        {
            giveAlertFeedback("Name field needs to be filled.");
        }


    }//GEN-LAST:event_jbSaveActionPerformed

    private void jbLoadPublicKeyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbLoadPublicKeyActionPerformed
    {//GEN-HEADEREND:event_jbLoadPublicKeyActionPerformed
        JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File("."));
        int i = file.showOpenDialog(null);
        if ( i == JFileChooser.APPROVE_OPTION )
        {
            try
            {
                publicKey = SecurityUtils.loadKey(file.getSelectedFile().getAbsolutePath(), "RSA");
            }
            catch ( IOException ex )
            {
                giveAlertFeedback(ex.getMessage());
            }
        }
    }//GEN-LAST:event_jbLoadPublicKeyActionPerformed

    private void jbGenerateRSAKeysActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbGenerateRSAKeysActionPerformed
    {//GEN-HEADEREND:event_jbGenerateRSAKeysActionPerformed
        KeyPair keys;

        try
        {
            // Gera um par de chaves
            keys = SecurityUtils.generateKeyPair(1024);

            // Mostra uma janela ao utilizador a informar sobre os seguintes procedimentos.
            JOptionPane.showMessageDialog(
                null,
                "Two keys were generated for you.\n\nFirst save the public key.\nThen save the private key."
            );

            // Configurações JFileChooser
            JFileChooser file = new JFileChooser();
            // Pasta onde guardar. Neste caso é a pasta de origem do projeto
            file.setCurrentDirectory(new File("."));
            // Nome recomendado do ficheiro
            file.setSelectedFile(new File("public_key"));
            // Nome da janela de permite escolher a localização onde o ficheiro será guardado
            file.setDialogTitle("Save the public key");

            // Pede uma localização para guardar a chave pública. Guarda a opção escolhida pelo utilizador na variável i
            int i = file.showSaveDialog(null);

            if ( i == JFileChooser.APPROVE_OPTION )
            {

                // Caso seja clicado no butao save da janela, guardar a chave publica na localização escolhida
                SecurityUtils.saveKey(keys.getPublic(), file.getSelectedFile().getAbsolutePath());

                // Se a chave publica for guardada, então pede para guardar a privada
                // Nome recomendado do ficheiro
                file.setSelectedFile(new File("private_key"));
                // Nome da janela de permite escolher a localização onde o ficheiro será guardado
                file.setDialogTitle("Save the private key");

                i = file.showSaveDialog(null);

                if ( i == JFileChooser.APPROVE_OPTION )
                {
                    // Caso seja clicado no butao save da janela, guardar a chave privada na localização escolhida
                    SecurityUtils.saveKey(
                        keys.getPrivate(),
                        file.getSelectedFile().getAbsolutePath()
                    );
                }
            }

        }
        catch ( Exception e )
        {
            giveAlertFeedback(
                e.getMessage()
            );
        }
    }//GEN-LAST:event_jbGenerateRSAKeysActionPerformed

    /**
     * Fornece feedback ao utilizador.
     *
     * @param feedback
     */
    public void giveNormalFeedback(String feedback)
    {
        jlFeedback.setText(feedback);
        jlFeedback.setForeground(Color.black);
    }

    /**
     * Fornece feedback de alertas ao utilizador.
     *
     * @param feedback
     */
    public void giveAlertFeedback(String feedback)
    {
        jlFeedback.setText(feedback);
        jlFeedback.setForeground(Color.red);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for ( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels() )
            {
                if ( "Nimbus".equals(info.getName()) )
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch ( ClassNotFoundException ex )
        {
            java.util.logging.Logger.getLogger(GUI_NewAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch ( InstantiationException ex )
        {
            java.util.logging.Logger.getLogger(GUI_NewAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch ( IllegalAccessException ex )
        {
            java.util.logging.Logger.getLogger(GUI_NewAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch ( javax.swing.UnsupportedLookAndFeelException ex )
        {
            java.util.logging.Logger.getLogger(GUI_NewAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new GUI_NewAccount().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbGenerateRSAKeys;
    private javax.swing.JButton jbLoadPublicKey;
    private javax.swing.JButton jbSave;
    private javax.swing.JLabel jlFeedback;
    private javax.swing.JPasswordField jpfPassword;
    private javax.swing.JPasswordField jpfPasswordConfirm;
    private javax.swing.JTextField jtfName;
    // End of variables declaration//GEN-END:variables
}
