/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import AccountManager.AccountManager;
import AccountManager.AccountInformation;
import BankServices.AccountMovment;
import BankServices.LoanPayment;
import BlockChain.BlockChain;
import BlockChain.Block;
import BankServices.Loan;
import BankServices.Service;
import Network.Node;
import Network.NodeEventListener;
import SecureUtils.SecurityUtils;
import java.awt.Color;
import java.awt.event.WindowEvent;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.Key;
import java.security.KeyPair;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author Telmo
 */
public class GUI_Main extends javax.swing.JFrame implements NodeEventListener
{

    public BlockChain blockChain;
    public Key publicKey;
    public String passwordHash;
    public boolean windowWasCancelled;
    Node myNode;

    /**
     * Creates new form GUI
     */
    public GUI_Main()
    {

        initComponents();

        // Centra a janela
        this.setLocationRelativeTo(null);
        windowWasCancelled = false;

        jtaLedger.setEditable(false);
        jtaBlockReader.setEditable(false);
        jtaDisplayReceivedBlock.setEditable(false);
        jtbConnect.setSelected(true);

        try
        {
            // Connectar à rede
            // Cria um nodo e inicia o servidor
            myNode = new Node();
            myNode.startServer(this);

            //colocar a interface a escutar o nó
            myNode.addNodeListener(this);

            blockChain = new BlockChain(myNode);
        }
        catch ( Exception ex )
        {
            Logger.getLogger(GUI_Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jtpWindow = new javax.swing.JTabbedPane();
        jpBlockChain = new javax.swing.JPanel();
        jbExit = new javax.swing.JButton();
        jlFeedback = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaLedger = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jbCheckClientAccounts = new javax.swing.JButton();
        jbCheckLoans = new javax.swing.JButton();
        jbPrintBlockChain = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jbDeposit = new javax.swing.JButton();
        jbWithdrawal = new javax.swing.JButton();
        jbCheckMoney = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jbRequestLoan = new javax.swing.JButton();
        jbLoanPayment = new javax.swing.JButton();
        jbCheckLoan = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jbGenerateRSAKeys = new javax.swing.JButton();
        jbCreateNewAccount = new javax.swing.JButton();
        jpNetwork = new javax.swing.JPanel();
        pnNode = new javax.swing.JPanel();
        jtbConnect = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtpLog = new javax.swing.JTextPane();
        jlFeedbackNetwork = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtaBlockReader = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtaDisplayReceivedBlock = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        jbExit.setText("Exit");
        jbExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbExitActionPerformed(evt);
            }
        });

        jlFeedback.setText("Choose your option");

        jtaLedger.setColumns(20);
        jtaLedger.setRows(5);
        jScrollPane1.setViewportView(jtaLedger);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Bank"));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Consult"));

        jbCheckClientAccounts.setText("Client Accounts");
        jbCheckClientAccounts.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbCheckClientAccountsActionPerformed(evt);
            }
        });

        jbCheckLoans.setText("Loans");
        jbCheckLoans.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbCheckLoansActionPerformed(evt);
            }
        });

        jbPrintBlockChain.setText("Print BlockChain");
        jbPrintBlockChain.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbPrintBlockChainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbCheckClientAccounts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jbCheckLoans, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbPrintBlockChain, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbCheckClientAccounts, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCheckLoans, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbPrintBlockChain, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Client"));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Account Management"));

        jbDeposit.setText("Deposit");
        jbDeposit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbDepositActionPerformed(evt);
            }
        });

        jbWithdrawal.setText("Withdrawal");
        jbWithdrawal.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbWithdrawalActionPerformed(evt);
            }
        });

        jbCheckMoney.setText("Check money");
        jbCheckMoney.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbCheckMoneyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbDeposit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbWithdrawal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbCheckMoney, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbDeposit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbWithdrawal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbCheckMoney, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Services"));

        jbRequestLoan.setText("Request a Loan");
        jbRequestLoan.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbRequestLoanActionPerformed(evt);
            }
        });

        jbLoanPayment.setText("Loan Payment");
        jbLoanPayment.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbLoanPaymentActionPerformed(evt);
            }
        });

        jbCheckLoan.setText("Check Loan");
        jbCheckLoan.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbCheckLoanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbRequestLoan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbLoanPayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbCheckLoan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbRequestLoan, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbLoanPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbCheckLoan, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("New Account"));

        jbGenerateRSAKeys.setText("Generate RSA Keys");
        jbGenerateRSAKeys.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbGenerateRSAKeysActionPerformed(evt);
            }
        });

        jbCreateNewAccount.setText("Create a new account");
        jbCreateNewAccount.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbCreateNewAccountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbGenerateRSAKeys, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbCreateNewAccount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbGenerateRSAKeys, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbCreateNewAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpBlockChainLayout = new javax.swing.GroupLayout(jpBlockChain);
        jpBlockChain.setLayout(jpBlockChainLayout);
        jpBlockChainLayout.setHorizontalGroup(
            jpBlockChainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBlockChainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpBlockChainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlFeedback, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jpBlockChainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jbExit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpBlockChainLayout.setVerticalGroup(
            jpBlockChainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBlockChainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpBlockChainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(jpBlockChainLayout.createSequentialGroup()
                        .addComponent(jlFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbExit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtpWindow.addTab("BlockChain", jpBlockChain);

        pnNode.setBorder(javax.swing.BorderFactory.createTitledBorder("Node"));

        jtbConnect.setText("Connect");
        jtbConnect.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jtbConnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnNodeLayout = new javax.swing.GroupLayout(pnNode);
        pnNode.setLayout(pnNodeLayout);
        pnNodeLayout.setHorizontalGroup(
            pnNodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnNodeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtbConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnNodeLayout.setVerticalGroup(
            pnNodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnNodeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtbConnect, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                .addContainerGap())
        );

        jtpLog.setBorder(javax.swing.BorderFactory.createTitledBorder("Network Log"));
        jtpLog.setFont(new java.awt.Font("Courier New", 1, 12)); // NOI18N
        jtpLog.setPreferredSize(new java.awt.Dimension(400, 43));
        jScrollPane2.setViewportView(jtpLog);

        jlFeedbackNetwork.setText("All is good.");

        jtaBlockReader.setColumns(20);
        jtaBlockReader.setRows(5);
        jScrollPane3.setViewportView(jtaBlockReader);

        jLabel1.setText("Mined Block's Hash:");

        jLabel2.setText("Block that was received to mine:");

        jtaDisplayReceivedBlock.setColumns(20);
        jtaDisplayReceivedBlock.setRows(5);
        jScrollPane4.setViewportView(jtaDisplayReceivedBlock);

        javax.swing.GroupLayout jpNetworkLayout = new javax.swing.GroupLayout(jpNetwork);
        jpNetwork.setLayout(jpNetworkLayout);
        jpNetworkLayout.setHorizontalGroup(
            jpNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpNetworkLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnNode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlFeedbackNetwork)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpNetworkLayout.setVerticalGroup(
            jpNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpNetworkLayout.createSequentialGroup()
                .addGroup(jpNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpNetworkLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(pnNode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlFeedbackNetwork)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpNetworkLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );

        jtpWindow.addTab("Network", jpNetwork);

        jtpWindow.setSelectedIndex(1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtpWindow)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtpWindow)
                .addContainerGap())
        );

        jtpWindow.getAccessibleContext().setAccessibleName("BlockChain");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbExitActionPerformed
    {//GEN-HEADEREND:event_jbExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jbExitActionPerformed

    private void jbGenerateRSAKeysActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbGenerateRSAKeysActionPerformed
    {//GEN-HEADEREND:event_jbGenerateRSAKeysActionPerformed
        KeyPair keys;

        try
        {
            // Gera um par de chaves
            keys = SecurityUtils.generateKeyPair(1024);

            // Mostra uma janela ao utilizador a informar sobre os seguintes procedimentos.
            JOptionPane.showMessageDialog(
                    null,
                    "Two keys were generated for you.\n\nFirst save the public key.\nThen save the private key."
            );

            // Configurações JFileChooser
            JFileChooser file = new JFileChooser();
            // Pasta onde guardar. Neste caso é a pasta de origem do projeto
            file.setCurrentDirectory(new File("."));
            // Nome recomendado do ficheiro
            file.setSelectedFile(new File("public_key"));
            // Nome da janela de permite escolher a localização onde o ficheiro será guardado
            file.setDialogTitle("Save the public key");

            // Pede uma localização para guardar a chave pública. Guarda a opção escolhida pelo utilizador na variável i
            int i = file.showSaveDialog(null);

            if ( i == JFileChooser.APPROVE_OPTION )
            {

                // Caso seja clicado no butao save da janela, guardar a chave publica na localização escolhida
                SecurityUtils.saveKey(keys.getPublic(), file.getSelectedFile().getAbsolutePath());

                // Se a chave publica for guardada, então pede para guardar a privada
                // Nome recomendado do ficheiro
                file.setSelectedFile(new File("private_key"));
                // Nome da janela de permite escolher a localização onde o ficheiro será guardado
                file.setDialogTitle("Save the private key");

                i = file.showSaveDialog(null);

                if ( i == JFileChooser.APPROVE_OPTION )
                {
                    // Caso seja clicado no butao save da janela, guardar a chave privada na localização escolhida
                    SecurityUtils.saveKey(
                            keys.getPrivate(),
                            file.getSelectedFile().getAbsolutePath()
                    );
                }
            }

        }
        catch ( Exception e )
        {
            giveAlertFeedback(
                    jlFeedback,
                    e.getMessage()
            );
        }

    }//GEN-LAST:event_jbGenerateRSAKeysActionPerformed

    private void jbCreateNewAccountActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbCreateNewAccountActionPerformed
    {//GEN-HEADEREND:event_jbCreateNewAccountActionPerformed
        createNewClientAccount();
    }//GEN-LAST:event_jbCreateNewAccountActionPerformed

    private void jbDepositActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbDepositActionPerformed
    {//GEN-HEADEREND:event_jbDepositActionPerformed
        callMovmentWindow(AccountMovment.DEPOSIT);
    }//GEN-LAST:event_jbDepositActionPerformed

    private void jbWithdrawalActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbWithdrawalActionPerformed
    {//GEN-HEADEREND:event_jbWithdrawalActionPerformed

        callMovmentWindow(AccountMovment.WITHDRAWAL);
    }//GEN-LAST:event_jbWithdrawalActionPerformed

    private void jbCheckMoneyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbCheckMoneyActionPerformed
    {//GEN-HEADEREND:event_jbCheckMoneyActionPerformed

        GUI_AskForClientInfo askForClientInfo = new GUI_AskForClientInfo();

        // Fornecer este objecto à nova janela para poder atualizar as informações do utilizador
        askForClientInfo.loadMain(this);

        askForClientInfo.setVisible(true);
        askForClientInfo.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Aguarda que o jframe seja fechado
        askForClientInfo.addWindowListener(new java.awt.event.WindowAdapter()
        {
            @Override
            public void windowClosed(WindowEvent e)
            {
                if ( !windowWasCancelled )
                {
                    // Caso o cliente tenha conta
                    if ( clientHasAccount() )
                    {
                        // Mostra os seus movimentos
                        showClientMovments();
                    }
                }
            }
        });


    }//GEN-LAST:event_jbCheckMoneyActionPerformed

    private void jbCheckClientAccountsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbCheckClientAccountsActionPerformed
    {//GEN-HEADEREND:event_jbCheckClientAccountsActionPerformed
        // Limpar o Ledger
        jtaLedger.setText("");

        // Percorrer a blockChain
        for ( Block b : blockChain.chain )
        {
            // Caso se trate dos dados da conta
            if ( b.content instanceof AccountInformation )
            {
                jtaLedger.append(b.toString() + "\n\n");
            }
        }
    }//GEN-LAST:event_jbCheckClientAccountsActionPerformed

    private void jbCheckLoansActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbCheckLoansActionPerformed
    {//GEN-HEADEREND:event_jbCheckLoansActionPerformed
        // Limpar o Ledger
        jtaLedger.setText("");

        // Percorrer a blockChain
        for ( Block b : blockChain.chain )
        {
            // Caso se trate dos dados do emprestimo
            if ( b.content instanceof Loan )
            {
                jtaLedger.append(b.toString() + "\n\n");
            }
        }
    }//GEN-LAST:event_jbCheckLoansActionPerformed

    private void jbRequestLoanActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbRequestLoanActionPerformed
    {//GEN-HEADEREND:event_jbRequestLoanActionPerformed
        GUI_NewLoan newLoan = new GUI_NewLoan();
        newLoan.loadMain(this);
        newLoan.setVisible(true);
        newLoan.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }//GEN-LAST:event_jbRequestLoanActionPerformed

    private void jbCheckLoanActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbCheckLoanActionPerformed
    {//GEN-HEADEREND:event_jbCheckLoanActionPerformed

        GUI_AskForClientInfo askForClientInfo = new GUI_AskForClientInfo();

        // Fornecer este objecto à nova janela para poder atualizar as informações do utilizador
        askForClientInfo.loadMain(this);

        askForClientInfo.setVisible(true);
        askForClientInfo.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Aguarda que o jframe seja fechado
        askForClientInfo.addWindowListener(new java.awt.event.WindowAdapter()
        {
            @Override
            public void windowClosed(WindowEvent e)
            {
                try
                {
                    if ( !windowWasCancelled )
                    {
                        // Caso o cliente tenha conta
                        if ( clientHasAccount() )
                        {
                            Block loanActive = getActiveLoanHash();

                            if ( loanActive != null )
                            {
                                showLoan(loanActive);
                            }
                            else
                            {
                                jtaLedger.setText("{\n You have no active loans.\n}");
                            }
                        }
                        else
                        {
                            giveAlertFeedback(
                                    jlFeedback,
                                    "Account does not exist."
                            );
                        }
                    }
                }
                catch ( Exception ex )
                {
                    giveAlertFeedback(
                            jlFeedback,
                            ex.getMessage()
                    );
                }
            }
        });

    }//GEN-LAST:event_jbCheckLoanActionPerformed

    private void jbLoanPaymentActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbLoanPaymentActionPerformed
    {//GEN-HEADEREND:event_jbLoanPaymentActionPerformed
        callMovmentWindow("Loan Payment");
    }//GEN-LAST:event_jbLoanPaymentActionPerformed

    private void jbPrintBlockChainActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbPrintBlockChainActionPerformed
    {//GEN-HEADEREND:event_jbPrintBlockChainActionPerformed
        jtaLedger.setText(blockChain.toString());
    }//GEN-LAST:event_jbPrintBlockChainActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        try
        {
            myNode.disconnect();
        }
        catch ( Exception ex )
        {
            giveAlertFeedback(null, ex.getMessage());
        }
    }//GEN-LAST:event_formWindowClosing

    private void jtbConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jtbConnectActionPerformed
    {//GEN-HEADEREND:event_jtbConnectActionPerformed
        try
        {
            if ( myNode == null )
            {
                // Cria um nodo e inicia o servidor
                myNode = new Node();
                myNode.startServer(this);

                //colocar a interface a escutar o nó
                myNode.addNodeListener(this);

                blockChain = new BlockChain(myNode);
            }
            else
            {
                myNode.disconnect();
                myNode = null;
            }
        }
        catch ( Exception ex )
        {
            giveAlertFeedback(
                    jlFeedbackNetwork,
                    ex.getMessage()
            );
        }
    }//GEN-LAST:event_jtbConnectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for ( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels() )
            {
                if ( "Nimbus".equals(info.getName()) )
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        }
        catch ( ClassNotFoundException ex )
        {
            java.util.logging.Logger.getLogger(GUI_Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        catch ( InstantiationException ex )
        {
            java.util.logging.Logger.getLogger(GUI_Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        catch ( IllegalAccessException ex )
        {
            java.util.logging.Logger.getLogger(GUI_Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        catch ( javax.swing.UnsupportedLookAndFeelException ex )
        {
            java.util.logging.Logger.getLogger(GUI_Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new GUI_Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton jbCheckClientAccounts;
    private javax.swing.JButton jbCheckLoan;
    private javax.swing.JButton jbCheckLoans;
    private javax.swing.JButton jbCheckMoney;
    private javax.swing.JButton jbCreateNewAccount;
    private javax.swing.JButton jbDeposit;
    private javax.swing.JButton jbExit;
    private javax.swing.JButton jbGenerateRSAKeys;
    private javax.swing.JButton jbLoanPayment;
    private javax.swing.JButton jbPrintBlockChain;
    private javax.swing.JButton jbRequestLoan;
    private javax.swing.JButton jbWithdrawal;
    private javax.swing.JLabel jlFeedback;
    private javax.swing.JLabel jlFeedbackNetwork;
    private javax.swing.JPanel jpBlockChain;
    private javax.swing.JPanel jpNetwork;
    private javax.swing.JTextArea jtaBlockReader;
    private javax.swing.JTextArea jtaDisplayReceivedBlock;
    private javax.swing.JTextArea jtaLedger;
    private javax.swing.JToggleButton jtbConnect;
    private javax.swing.JTextPane jtpLog;
    private javax.swing.JTabbedPane jtpWindow;
    private javax.swing.JPanel pnNode;
    // End of variables declaration//GEN-END:variables

    public void addMinedBlockToBlockChain(Block block)
    {
        blockChain.addMinedBlock(block);
    }

    /**
     * Retorna o hash code do bloco do emprestimo activo
     *
     */
    private Block getActiveLoanHash()
    {
        for ( Block b : blockChain.chain )
        {
            // Caso se trate de um emprestimo
            if ( b.content instanceof Loan )
            {
                // Individualizar a instancia do Loan
                Loan loanInfo = (Loan) b.content;

                // Se se tratar de um empretimo do cliente
                if ( loanInfo.comparePublicKeys(publicKey) )
                {

                    // Recolhe o que falta pagar do emprestimo
                    double whatsLeftToPay = LoanPayment.whatsLeftToPayInThisLoan(
                            b.hashCode, // O Hash do bloco de emprestimo porque existe referencia a ele em todos os pagamentos do emprestimo
                            blockChain,
                            loanInfo.getAmountWithInterest() // Total a pagar do emprestimo
                    );

                    // Caso ainda não tenha pago tudo, coloca como activo (TRUE)
                    // Seão coloca como FALSE
                    if ( whatsLeftToPay != 0.0 )
                    {
                        return b;
                    }
                }
            }
        }

        // Caso não tenha emprestimo activo
        return null;
    }

    /**
     * Mostra o emprestimo do hash que é recebido por paramatro.
     *
     * @param loanBlock
     */
    private void showLoan(Block loanBlock)
    {
        jtaLedger.setText("");

        for ( Block b : blockChain.chain )
        {
            // Caso seja um emprestimo
            if ( b.content instanceof Loan )
            {
                // Caso esse emprestimo seja o emprestimo em questão
                if ( b.hashCode.equals(loanBlock.hashCode) )
                {
                    // Imprime o bloco de pagamento
                    jtaLedger.append(b.toString() + "\n\n");
                }
            }
            else if ( b.content instanceof LoanPayment ) // Caso seja um pagamento de emprestimo
            {
                // Individualizar esse pagamento
                LoanPayment payment = (LoanPayment) b.content;

                // Caso esse pagamento pertença ao emprestimo a ser imprimido
                if ( payment.belongsToThisLoan(loanBlock.hashCode) )
                {

                    // Imprime o bloco de pagamento
                    jtaLedger.append(b.toString() + "\n\n");
                }
            }
        }

        Loan loanInfo = (Loan) loanBlock.content;
        jtaLedger.append("{\n Left to pay: "
                + LoanPayment.whatsLeftToPayInThisLoan(loanBlock.hashCode, blockChain, loanInfo.getAmountWithInterest()) + "€\n}"
        );
    }

    /**
     * Verifica se o cliente tem conta criada no banco.
     *
     */
    private boolean clientHasAccount()
    {

        for ( Block b : blockChain.chain )
        {
            // Individualiza o conteudo do bloco
            AccountManager blockContent = b.content;

            // Caso o conteudo do bloco seja uma informação de conta e esta pertença ao cliente
            if ( blockContent instanceof AccountInformation && blockContent.comparePublicKeys(publicKey) )
            {
                // Transforma o blockContent na sua verdadeira instancia
                AccountInformation info = (AccountInformation) blockContent;

                try
                {
                    // Trata da autenticação
                    if ( info.authenticateLogin(passwordHash) )
                    {
                        // Imprime o bloco de informação
                        jtaLedger.setText(b.toString());

                        return true;
                    }
                    else
                    {
                        giveAlertFeedback(
                                jlFeedback,
                                "Wrong password provided."
                        );
                        return false;
                    }
                }
                catch ( NoSuchAlgorithmException ex )
                {
                    giveAlertFeedback(
                            jlFeedback,
                            ex.getMessage()
                    );
                }

                break;
            }
        }

        giveAlertFeedback(
                jlFeedback,
                "Account not found."
        );

        return false;
    }

    /**
     * Mostra os movimentos de conta do cliente.
     *
     */
    private void showClientMovments()
    {
        for ( Block b : blockChain.chain )
        {
            AccountManager content = b.content;

            // Caso o bloco seja do cliente
            if ( content.comparePublicKeys(publicKey) )
            {
                // Caso se trate de um movimento de conta ou pagamento de emprestimo do cliente em questão 
                if ( content instanceof Service )
                {
                    // Imprime bloco
                    jtaLedger.append("\n\n" + b.toString());
                }
            }

        }

        // Imprime o dinheiro total do cliente
        jtaLedger.append("\n\n{\n Total money: " + AccountMovment.getMyMoney(blockChain, publicKey) + "€\n}");
    }

    /**
     * Abre uma nova janela onde o cliente consegue preencher as informações da
     * movimentação na sua conta.
     *
     * @param movType Tipo de movimentação ( 'Deposit', 'Withdrawal' ou
     * 'LoanPayment' )
     */
    public void callMovmentWindow(String movType)
    {
        GUI_AccountMovment movWindow = new GUI_AccountMovment();

        // Fornecer este objecto à nova janela para poder atualizar as informações do utilizador
        movWindow.loadMain(this, movType);
        movWindow.setVisible(true);
        movWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    /**
     * Escreve no ledger.
     *
     * @param str
     */
    public void setLedger(String str)
    {
        jtaLedger.setText(str);
    }

    /**
     * Abre uma janela onde permite dar load a uma chave privada.
     *
     * @return
     */
    public PrivateKey askForPrivateKey()
    {
        try
        {
            JFileChooser file = new JFileChooser();
            file.setCurrentDirectory(new File("."));
            int i = file.showOpenDialog(null);
            if ( i == JFileChooser.APPROVE_OPTION )
            {
                byte[] privateKeyBytes = Files.readAllBytes(Paths.get(file.getSelectedFile().getAbsolutePath()));
                PrivateKey privateKey = (PrivateKey) SecurityUtils.getPrivateKey(privateKeyBytes);
                return privateKey;
            }
        }
        catch ( Exception ex )
        {
            giveAlertFeedback(
                    jlFeedback,
                    ex.getMessage()
            );
        }

        return null;
    }

    /**
     * Abre uma janela onde é possível preencher os dados de um novo cliente.
     *
     */
    public void createNewClientAccount()
    {
        GUI_NewAccount newAccountWindow = new GUI_NewAccount();
        newAccountWindow.loadMain(this);
        newAccountWindow.setVisible(true);
    }

    /**
     * Fornece feedback ao utilizador.
     *
     * @param label
     * @param feedback
     */
    public void giveNormalFeedback(JLabel label, String feedback)
    {
        if ( label == null )
        {
            label = jlFeedback;
        }

        label.setText(feedback);
        label.setForeground(Color.black);
    }

    /**
     * Fornece feedback de alertas ao utilizador.
     *
     * @param label
     * @param feedback
     */
    public void giveAlertFeedback(JLabel label, String feedback)
    {
        if ( label == null )
        {
            label = jlFeedback;
        }

        label.setText(feedback);
        label.setForeground(Color.red);
    }

    /**
     * Define o hash da password do cliente para poder ser verificado.
     *
     * @param password
     */
    public void setPasswordHash(String password)
    {
        // Transforma a password num hash
        try
        {
            MessageDigest hash;
            hash = MessageDigest
                    .getInstance("SHA-512");
            hash.update(
                    password.getBytes()
            );

            // Guarda o hash da password
            passwordHash = Base64.getEncoder().encodeToString(hash.digest());
        }
        catch ( NoSuchAlgorithmException ex )
        {
            jlFeedback.setText(ex.getMessage());
        }
    }

    /**
     * Define a chave pública do cliente.
     *
     * @param publicKey
     */
    public void setPublicKey(Key publicKey)
    {
        this.publicKey = publicKey;
    }

    /**
     * Desabilita os botões de movimento de conta.
     *
     */
    public void disableButtons()
    {
        jbDeposit.setEnabled(false);
        jbWithdrawal.setEnabled(false);
        jbRequestLoan.setEnabled(false);
        jbLoanPayment.setEnabled(false);
        jbCreateNewAccount.setEnabled(false);
    }

    /**
     * Ativa os botões de movimento de conta.
     *
     */
    public void enableButtons()
    {
        jbDeposit.setEnabled(true);
        jbWithdrawal.setEnabled(true);
        jbRequestLoan.setEnabled(true);
        jbLoanPayment.setEnabled(true);
        jbCreateNewAccount.setEnabled(true);
    }

    public void displayReceivedBlock(String txt)
    {
        jtaDisplayReceivedBlock.setText(txt);
    }

    public void writeMinedBlock(String txt)
    {
        jtaBlockReader.setText(txt);
    }

    private void printLog(String msg, Color color)
    {
        SwingUtilities.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                StyleContext sc = StyleContext.getDefaultStyleContext();
                AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, color);
                // aset = sc.addAttribute(aset, StyleConstants.Background, Color.BLACK);
                aset = sc.addAttribute(aset, StyleConstants.Bold, true);
                jtpLog.setCaretPosition(0);
                jtpLog.setCharacterAttributes(aset, false);
                jtpLog.replaceSelection(" " + msg);
                jtpLog.setCaretPosition(0);
                aset = sc.addAttribute(aset, StyleConstants.Foreground, Color.BLACK);
                jtpLog.setCharacterAttributes(aset, false);
                jtpLog.replaceSelection("\n" + (new SimpleDateFormat("HH:mm:ss")).format(new Date()));
            }
        });

    }

    @Override
    public void onConnectLink(Object obj)
    {
        printLog(obj.toString() + " -> CONNECTED", Color.blue);
    }

    @Override
    public void onDisconnectLink(Object obj)
    {
        printLog(obj.toString() + " -> DISCONNECTED", Color.red);
    }
}
